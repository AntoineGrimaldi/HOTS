Timer unit: 1e-06 s

Total time: 0.038455 s
File: /Users/boutin.v/Documents/HOTS/HOTS/Classifier.py
Function: HistogramDistance at line 41

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    41                                               def HistogramDistance(self,methods=['euclidian','normalized','battacha'], to_print=False):#(histo_to_classify,proto_histo,proto_label_list=None):
    42                                                   '''
    43                                                   method to classify using histogram distance between prototypes and :
    44                                                   INPUT :
    45                                                       + methods : (<list>) of (<string>) to inform which norm to use to calculate histogram distances
    46                                                           should be euclidian, normalized or battacha
    47                                                       + to_print : (<boolean>) to indicate if we want to print to resulting accuracy
    48                                                   OUTPUT :
    49                                                       + prediction : (<list>) of (<np.array>) of size (nb_of_testing_sample,1) representing the predicted output
    50                                                           for each method
    51                                                       + accu : (<list>) of (<float>) of size (nb_of_methods) representing the accuracy on the testing_sample for each method
    52                                                       + methods : (<list>) of (<string>) of size (nb_of_methods) representing the name of the method used to calculate distance
    53                                                   '''
    54         1        16121  16121.0     41.9          histo_train, pola_train = GenerateHistogram(self.event_train)
    55         1        17096  17096.0     44.5          histo_test, pola_test = GenerateHistogram(self.event_test)
    56         1            3      3.0      0.0          prediction = list()
    57         1            1      1.0      0.0          allmethod = list()
    58         4            3      0.8      0.0          for each_method in methods:
    59         3           44     14.7      0.1              output = np.zeros((histo_test.shape[0],1)).astype(np.str_)
    60       123          138      1.1      0.4              for idx,each_histo in enumerate(histo_test):
    61                                           
    62       120         3922     32.7     10.2                  distance = Norm(each_histo,histo_train,each_method)
    63       120          510      4.2      1.3                  min_dist = np.argmin(distance)
    64       120          297      2.5      0.8                  output[idx,0] = self.TrainingLabel[min_dist][0]
    65                                           
    66         3            3      1.0      0.0              prediction.append(output)
    67         3            3      1.0      0.0              allmethod.append(each_method)
    68         1           44     44.0      0.1          accu = self.Accuracy(prediction)
    69         1            1      1.0      0.0          if to_print==True:
    70         1            0      0.0      0.0              to_write=''
    71         4            5      1.2      0.0              for each_accu, each_method in zip(accu,allmethod):
    72                                                           #print(each_accu))
    73                                                           #print(type(each_method))
    74         3           14      4.7      0.0                  to_write = str(each_method) + ':' + str(each_accu%100) + '% ### '+ to_write
    75         1          248    248.0      0.6              print(to_write)
    76                                           
    77         1            2      2.0      0.0          return prediction, accu, allmethod