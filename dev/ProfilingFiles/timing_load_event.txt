Timer unit: 1e-06 s

Total time: 0.356263 s
File: /Users/laurentperrinet/quantic/science/SpikeAI/HOTS/HOTS/Event.py
Function: LoadFromMat at line 38

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    38                                               def LoadFromMat(self, path, image_number, verbose=0):
    39                                                   '''
    40                                                   Load Events from a .mat file. Only the events contained in ListPolarities are kept:
    41                                                   INPUT
    42                                                       + path : a string which is the path of the .mat file (ex : './data_cache/ExtractedStabilized.mat')
    43                                                       + image_number : list with all the numbers of image to load
    44                                                   '''
    45         3     195507.0  65169.0     54.9          obj = scipy.io.loadmat(path)
    46         3         10.0      3.3      0.0          ROI = obj['ROI'][0]
    47                                           
    48         3          6.0      2.0      0.0          if type(image_number) is int:
    49                                                       image_number = [image_number]
    50         3          3.0      1.0      0.0          elif type(image_number) is not list:
    51                                                       raise TypeError(
    52                                                           'the type of argument image_number should be int or list')
    53         3          3.0      1.0      0.0          if verbose > 0:
    54                                                       print("chargement des images {0}".format(image_number))
    55         3          3.0      1.0      0.0          Total_size = 0
    56        84         76.0      0.9      0.0          for idx, each_image in enumerate(image_number):
    57        81        104.0      1.3      0.0              image = ROI[each_image][0, 0]
    58                                           
    59        81        169.0      2.1      0.0              Total_size += image[1].shape[1]
    60                                           
    61         3      19033.0   6344.3      5.3          self.address = np.zeros((Total_size, 2)).astype(int)
    62         3       1136.0    378.7      0.3          self.time = np.zeros((Total_size))
    63         3         50.0     16.7      0.0          self.polarity = np.zeros((Total_size))
    64         3          3.0      1.0      0.0          first_idx = 0
    65                                           
    66        84        163.0      1.9      0.0          for idx, each_image in enumerate(image_number):
    67        81        333.0      4.1      0.1              image = ROI[each_image][0, 0]
    68        81        667.0      8.2      0.2              last_idx = first_idx + image[0].shape[1]
    69        81      11015.0    136.0      3.1              self.address[first_idx:last_idx, 0] = (image[1] - 1).astype(int)
    70        81       7438.0     91.8      2.1              self.address[first_idx:last_idx, 1] = (image[0] - 1).astype(int)
    71        81       8930.0    110.2      2.5              self.time[first_idx:last_idx] = (image[3] * 1e-6)
    72        81      10565.0    130.4      3.0              self.polarity[first_idx:last_idx] = image[2].astype(int)
    73        81        166.0      2.0      0.0              first_idx = last_idx
    74                                           
    75         3      11668.0   3889.3      3.3          self.polarity[self.polarity.T == -1] = 0
    76         3       6392.0   2130.7      1.8          self.polarity = self.polarity.astype(int)
    77                                                   # Filter only the wanted polarity
    78         3      25518.0   8506.0      7.2          self.ListPolarities = np.unique(self.polarity)
    79         3       2755.0    918.3      0.8          filt = np.in1d(self.polarity, np.array(self.ListPolarities))
    80         3      54540.0  18180.0     15.3          self.filter(filt, mode='itself')
    81         3         10.0      3.3      0.0          if self.OutOnePolarity == True:
    82                                                       self.polarity = np.zeros_like(self.polarity)
    83                                                       self.ListPolarities = [0]

Total time: 0.372568 s
File: /Users/laurentperrinet/quantic/science/SpikeAI/HOTS/HOTS/Event.py
Function: SimpleAlphabet at line 195

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   195                                           def SimpleAlphabet(NbTrainingData, NbTestingData, Path=None, LabelPath=None, ClusteringData=None, OutOnePolarity=False, ListPolarities=None, verbose=0):
   196                                               '''
   197                                               Extract the Data from the SimpleAlphabet DataBase :
   198                                               INPUT :
   199                                                   + NbTrainingData : (int) Number of Training Data
   200                                                   + NbTestingData : (int) Number of Testing Data
   201                                                   + Path : (str) Path of the .mat file. If the path is None, the path is ../database/SimpleAlphabet/ExtractedStabilized.mat
   202                                                   + LabelPath : (str) Path of the .pkl label path. If the path is None, the path is  ../database/SimpleAlphabet/alphabet_label.pkl
   203                                                   + ClusteringData : (list) a list of int indicating the image used to train the cluster. If None, the image used to train the
   204                                                       the cluster are the trainingData
   205                                                   + OutOnePolarity : (bool), transform all polarities into 1 polarity
   206                                                   + ListPolarities : (list), list of the polarity we want to keep
   207                                               OUTPUT :
   208                                                   + event_tr : (<object event>)
   209                                                   + event_te : (<object event>)
   210                                                   + event_cl : (<object event>)
   211                                                   + label_tr :
   212                                                   + label_te :
   213                                               '''
   214         1          4.0      4.0      0.0      if Path is None:
   215                                                   Path = '../database/SimpleAlphabet/ExtractedStabilized.mat'
   216                                           
   217         1          1.0      1.0      0.0      if LabelPath is None:
   218                                                   label_list = LoadObject(
   219                                                       '../database/SimpleAlphabet/alphabet_label.pkl')
   220                                               else:
   221         1        164.0    164.0      0.0          label_list = LoadObject(LabelPath)
   222                                           
   223         1          2.0      2.0      0.0      if NbTrainingData+NbTestingData > 76:
   224                                                   raise NameError('Overlaping between TrainingData and Testing Data')
   225         1          2.0      2.0      0.0      event_tr = Event(ImageSize=(
   226         1         25.0     25.0      0.0          32, 32), ListPolarities=ListPolarities, OutOnePolarity=OutOnePolarity)
   227         1          1.0      1.0      0.0      event_te = Event(ImageSize=(
   228         1         12.0     12.0      0.0          32, 32), ListPolarities=ListPolarities, OutOnePolarity=OutOnePolarity)
   229         1          1.0      1.0      0.0      event_cl = Event(ImageSize=(
   230         1         13.0     13.0      0.0          32, 32), ListPolarities=ListPolarities, OutOnePolarity=OutOnePolarity)
   231         1          1.0      1.0      0.0      event_tr.LoadFromMat(Path, image_number=list(
   232         1     199313.0 199313.0     53.5          np.arange(0, NbTrainingData)), verbose=verbose)
   233         1          7.0      7.0      0.0      event_te.LoadFromMat(Path, image_number=list(
   234         1     121967.0 121967.0     32.7          np.arange(NbTrainingData, NbTrainingData+NbTestingData)), verbose=verbose)
   235                                           
   236         1          1.0      1.0      0.0      if ClusteringData is None:
   237                                                   event_cl = event_tr
   238                                               else:
   239         1          1.0      1.0      0.0          event_cl.LoadFromMat(
   240         1      49601.0  49601.0     13.3              Path, image_number=ClusteringData, verbose=verbose)
   241                                           
   242                                               # Generate Groud Truth Label
   243        37         51.0      1.4      0.0      for idx, img in enumerate(np.arange(0, NbTrainingData)):
   244        36         23.0      0.6      0.0          if idx != 0:
   245        35        646.0     18.5      0.2              label_tr = np.vstack((label_tr, label_list[img][0]))
   246                                                   else:
   247         1          2.0      2.0      0.0              label_tr = label_list[img][0]
   248                                           
   249        41         45.0      1.1      0.0      for idx, img in enumerate(np.arange(NbTrainingData, NbTrainingData+NbTestingData)):
   250        40         27.0      0.7      0.0          if idx != 0:
   251        39        656.0     16.8      0.2              label_te = np.vstack((label_te, label_list[img][0]))
   252                                                   else:
   253         1          1.0      1.0      0.0              label_te = label_list[img][0]
   254                                           
   255         1          1.0      1.0      0.0      return event_tr, event_te, event_cl, label_tr, label_te