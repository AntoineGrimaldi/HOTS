Timer unit: 1e-06 s

Total time: 32.3982 s
File: /Users/boutin.v/Documents/HOTS/HOTS/KmeansCluster.py
Function: fit at line 85

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    85                                               def fit (self,STS, init=None, NbCycle=1):
    86                                                   '''
    87                                                   Methods to learn prototypes fitting data
    88                                                   INPUT :
    89                                                       + STS : (<STS object>) Stream of SpatioTemporal Surface to fit
    90                                                       + init : (<string>) Method to initialize the prototype ('rdn' or None)
    91                                                       + NbCycle : (<int>) Number of time the stream is going to be browse.
    92                                                   OUTPUT :
    93                                                       + prototype : (<np.array>) matrix of size (nb_cluster,nb_polarity*((2*R+1)*(2*R+1)))
    94                                                           representing the centers of clusters
    95                                                   '''
    96         3           12      4.0      0.0          tic = time.time()
    97         3       634338 211446.0      2.0          surface = STS.Surface.copy()
    98         3           15      5.0      0.0          if self.to_record == True :
    99         3           18      6.0      0.0              self.record_each = surface.shape[0]//100
   100         3            3      1.0      0.0          if init is None :
   101         3           34     11.3      0.0              self.prototype=surface[:self.nb_cluster,:]
   102                                                   elif init == 'rdn' :
   103                                                       idx = np.random.permutation(np.arange(surface.shape[0]))[:self.nb_cluster]
   104                                                       self.prototype = surface[idx, :]
   105                                                   else :
   106                                                       raise NameError('argument '+str(init)+' is not valid. Only None or rdn are valid')
   107         3            3      1.0      0.0          idx_global=0
   108         3           47     15.7      0.0          nb_proto = np.zeros((self.nb_cluster)).astype(int)
   109         6           18      3.0      0.0          for each_cycle in range(NbCycle):
   110         3           11      3.7      0.0              nb_proto = np.zeros((self.nb_cluster)).astype(int)
   111    176982       261219      1.5      0.8              for idx, Si in enumerate(surface):
   112    176979      9319500     52.7     28.8                  Distance_to_proto = np.linalg.norm(Si - self.prototype,ord=2,axis=1)
   113    176979       900310      5.1      2.8                  closest_proto_idx = np.argmin(Distance_to_proto)
   114    176979       264249      1.5      0.8                  pk = nb_proto[closest_proto_idx]
   115    176979       328179      1.9      1.0                  Ck = self.prototype[closest_proto_idx,:]
   116    176979       370571      2.1      1.1                  alpha = 0.01/(1+pk/20000)
   117    176979      1640830      9.3      5.1                  beta = np.dot(Ck, Si)/(np.sqrt(np.dot(Si, Si))*np.sqrt(np.dot(Ck, Ck)))
   118    176979      1577769      8.9      4.9                  Ck_t = Ck + alpha*(Si - beta*Ck)
   119                                                           #Ck_t = Ck + alpha*beta*(Si - Ck)
   120    176979       359700      2.0      1.1                  nb_proto[closest_proto_idx] += 1
   121    176979       464389      2.6      1.4                  self.prototype[closest_proto_idx, :] = Ck_t
   122                                           
   123    176979       224709      1.3      0.7                  if self.to_record == True :
   124    176979       316215      1.8      1.0                      if idx_global % int(self.record_each) == 0 :
   125                                                                   #self.monitor(STS,SurfaceFilter=1000)
   126       303     14693807  48494.4     45.4                          pol, output_distance, = self.predict(STS,SurfaceFilter=1000)
   127       303        20115     66.4      0.1                          error = np.mean(output_distance)
   128       303        81691    269.6      0.3                          active_probe = np.histogram(pol,bins=np.arange(self.nb_cluster+1))[0]
   129       303          811      2.7      0.0                          record_one = pd.DataFrame([{'error':error,
   130       303          468      1.5      0.0                                                      'histo':active_probe}
   131                                                                                               ],
   132       303       333155   1099.5      1.0                                              index=[idx_global])
   133       303       397476   1311.8      1.2                          self.record = pd.concat([self.record, record_one])
   134                                           
   135    176979       208138      1.2      0.6                  idx_global += 1
   136         3            8      2.7      0.0              tac = time.time()
   137         3            5      1.7      0.0          self.nb_proto = nb_proto
   138         3            3      1.0      0.0          if self.verbose > 0:
   139         3          389    129.7      0.0              print('Clustering SpatioTemporal Surface in ------ {0:.2f} s'.format(tac-tic))
   140                                           
   141         3            4      1.3      0.0          return self.prototype

Total time: 0 s
File: /Users/boutin.v/Documents/HOTS/HOTS/KmeansCluster.py
Function: predict_jit at line 297

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   297                                           def predict_jit(Surface, prototype, nb_cluster, event=None, SurfaceFilter=None):
   298                                               '''
   299                                               Methods to predict the closest prototype from a stream a STS
   300                                               INPUT :
   301                                                   + STS : (<STS object>) Stream of SpatioTemporal Surface to fit
   302                                                   + event : (<event object>) event associated to the STS. return another event stream with new polarity
   303                                                   + SurfaceFilter : (<int>) To predict only on a small subsample of Surface of size (SurfaceFilter)
   304                                               OUTPUT :
   305                                                   + output_distance : (<np.array>)
   306                                                   + event_output : (<event.object>)
   307                                                   + polarity : (<np.array>)
   308                                               '''
   309                                               if SurfaceFilter == None:
   310                                                   to_predict = Surface
   311                                               else :
   312                                                   random_selection = np.random.permutation(np.arange(Surface.shape[0]))[:SurfaceFilter]
   313                                                   to_predict = Surface[random_selection]
   314                                           
   315                                               #if self.prototype is None :
   316                                               #    raise ValueError('Train the Cluster before doing prediction')
   317                                               #polarity,output_distance = np.zeros(to_predict.shape[0]).astype(int),np.zeros(to_predict.shape[0])
   318                                           
   319                                               polarity, output_distance = jitted_prediction(to_predict,prototype)
   320                                               #for idx,surface in enumerate(to_predict):
   321                                               #    Euclidian_distance = np.linalg.norm(surface-prototype,ord=2,axis=1)
   322                                               #    polarity[idx] = np.argmin(Euclidian_distance)
   323                                               #    output_distance[idx] = np.amin(Euclidian_distance)
   324                                               if event is not None :
   325                                                   event_output = event.copy()
   326                                                   event_output.polarity = polarity
   327                                                   event_output.ListPolarities= list(np.arange(nb_cluster))
   328                                                   return event_output, output_distance
   329                                           
   330                                               return output_distance,polarity

Total time: 0 s
File: /Users/boutin.v/Documents/HOTS/HOTS/KmeansCluster.py
Function: jitted_prediction at line 332

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   332                                           @jit(nopython=True)
   333                                           def jitted_prediction(to_predict,prototype):
   334                                               polarity,output_distance = np.zeros(to_predict.shape[0]),np.zeros(to_predict.shape[0])
   335                                               for idx in range(to_predict.shape[0]):
   336                                                   Euclidian_distance = np.sqrt(np.sum((to_predict[idx] - prototype)**2,axis=1))
   337                                                   polarity[idx] = np.argmin(Euclidian_distance)
   338                                                   output_distance[idx] = np.amin(Euclidian_distance)
   339                                               return output_distance,polarity

Total time: 50.0564 s
File: /Users/boutin.v/Documents/HOTS/HOTS/Layer.py
Function: TrainLayer at line 116

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   116                                               def TrainLayer(self, event, nb_cluster, to_record=False, NbCycle=1):
   117                                                   '''
   118                                                   Learn the Cluster
   119                                                   INPUT :
   120                                                       + event (<object event>) : input event
   121                                                       + nb_cluster(<int>) : nb of centers
   122                                                       + record_each (<int>) : record the convergence error each reach_each
   123                                                       + NbCycle (<int>) : number of time we repeat the learning process. Need to be used when not enought training data to reach the convergence
   124                                           
   125                                                   OUTPUT :
   126                                                       + output (<object event>) : Event with new polarities corresponding to the closest cluster center
   127                                                       + ClusterLayer (<object Cluster) : Learnt cluster
   128                                                   '''
   129         3            6      2.0      0.0          self.input=event
   130         3          630    210.0      0.0          self.SpTe_Layer = STS(tau=self.tau, R=self.R, verbose=self.verbose, sigma=self.sigma)
   131         3      7122620 2374206.7     14.2          Surface_Layer = self.SpTe_Layer.create(event = self.input, kernel=self.kernel)
   132         3       719359 239786.3      1.4          event_filtered, filt = self.SpTe_Layer.FilterRecent(event = self.input, threshold=self.ThrFilter)
   133         3           14      4.7      0.0          self.ClusterLayer.nb_cluster, self.ClusterLayer.to_record = nb_cluster, to_record
   134         3     35351943 11783981.0     70.6          Prototype = self.ClusterLayer.fit(self.SpTe_Layer, NbCycle=NbCycle)
   135         3      6861839 2287279.7     13.7          self.output,_ = self.ClusterLayer.predict(STS=self.SpTe_Layer,event = event_filtered)
   136                                           
   137         3            7      2.3      0.0          return self.output, self.ClusterLayer

Total time: 51.61 s
File: /Users/boutin.v/Documents/HOTS/HOTS/Network.py
Function: TrainCluster at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                               def TrainCluster(self, event, NbClusterList, to_record=False, NbCycle=1, KN=None, nb_cluster=None ) :
     9         1            2      2.0      0.0          event_i = event
    10         1            1      1.0      0.0          idx_Layer = 0
    11         1            1      1.0      0.0          ClusterList = list()
    12         5           10      2.0      0.0          for idx, each_Layer in enumerate(self.Layers):
    13         4            8      2.0      0.0              if each_Layer.type == 'void':
    14                                                           print('problem !!' )
    15         4            3      0.8      0.0              elif each_Layer.type == 'Filter':
    16         1      1505929 1505929.0      2.9                  event_o = each_Layer.RunLayer(event_i)
    17         3            2      0.7      0.0              elif each_Layer.type == 'Layer':
    18                                                           #event_o, Cluster = each_Layer.TrainLayer(event_i, nb_cluster*(KN)**(idx_Layer), record_each=record_each, NbCycle=NbCycle)
    19                                                           #print('nb_cluster at layer {0} :  {1}'.format(idx_Layer+1,NbClusterList[idx_Layer]))
    20         3     50104031 16701343.7     97.1                  event_o, Cluster = each_Layer.TrainLayer(event_i, NbClusterList[idx_Layer], to_record=to_record, NbCycle=NbCycle)
    21         3           10      3.3      0.0                  ClusterList.append(Cluster)
    22         3            3      1.0      0.0                  idx_Layer = idx_Layer + 1
    23                                                           #if self.verbose>0 :
    24                                                           #    print('Training of Layer {0}'.format(idx_Layer))
    25                                                       else :
    26                                                           print(type(each_Layer))
    27         4            5      1.2      0.0              event_i = event_o
    28                                                       #print(event_i.address.shape[0])
    29         1            1      1.0      0.0          return ClusterList, event_o