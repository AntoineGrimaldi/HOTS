Timer unit: 1e-06 s

Total time: 155.346 s
File: /Users/boutin.v/Documents/HOTS/HOTS/KmeansCluster.py
Function: fit at line 39

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    39                                               def fit (self,STS, init=None, NbCycle=1):
    40                                                   '''
    41                                                   Methods to learn prototypes fitting data
    42                                                   INPUT :
    43                                                       + STS : (<STS object>) Stream of SpatioTemporal Surface to fit
    44                                                       + init : (<string>) Method to initialize the prototype ('rdn' or None)
    45                                                       + NbCycle : (<int>) Number of time the stream is going to be browse.
    46                                                   OUTPUT :
    47                                                       + prototype : (<np.array>) matrix of size (nb_cluster,nb_polarity*((2*R+1)*(2*R+1)))
    48                                                           representing the centers of clusters
    49                                                   '''
    50         3           12      4.0      0.0          tic = time.time()
    51                                           
    52         3       736927 245642.3      0.5          surface = STS.Surface.copy()
    53                                           
    54         3           17      5.7      0.0          if init is None :
    55         3           42     14.0      0.0              self.prototype=surface[:self.nb_cluster,:]
    56                                                   elif init == 'rdn' :
    57                                                       idx = np.random.permutation(np.arange(surface.shape[0]))[:self.nb_cluster]
    58                                                       self.prototype = surface[idx, :]
    59                                                   else :
    60                                                       raise NameError('argument '+str(init)+' is not valid. Only None or rdn are valid')
    61         3            4      1.3      0.0          idx_global=0
    62         3           54     18.0      0.0          nb_proto = np.zeros((self.nb_cluster)).astype(int)
    63         6           25      4.2      0.0          for each_cycle in range(NbCycle):
    64         3           29      9.7      0.0              nb_proto = np.zeros((self.nb_cluster)).astype(int)
    65    176982       268926      1.5      0.2              for idx, Si in enumerate(surface):
    66                                                           #Distance_to_proto = EuclidianNorm(Si, self.prototype)
    67    176979      9890860     55.9      6.4                  Distance_to_proto = np.linalg.norm(Si - self.prototype,ord=2,axis=1)
    68    176979       929999      5.3      0.6                  closest_proto_idx = np.argmin(Distance_to_proto)
    69    176979       264382      1.5      0.2                  pk = nb_proto[closest_proto_idx]
    70    176979       339880      1.9      0.2                  Ck = self.prototype[closest_proto_idx,:]
    71    176979       381220      2.2      0.2                  alpha = 0.01/(1+pk/20000)
    72    176979      1687479      9.5      1.1                  beta = np.dot(Ck, Si)/(np.sqrt(np.dot(Si, Si))*np.sqrt(np.dot(Ck, Ck)))
    73    176979      1658392      9.4      1.1                  Ck_t = Ck + alpha*(Si - beta*Ck)
    74                                                           #Ck_t = (1 - alpha*beta) * Ck + alpha*beta*Si
    75    176979       362253      2.0      0.2                  nb_proto[closest_proto_idx] += 1
    76                                                           #Ck_t /= np.amax(Ck_t)
    77    176979       463660      2.6      0.3                  self.prototype[closest_proto_idx, :] = Ck_t
    78                                           
    79    176979       238358      1.3      0.2                  if self.record_each != 0 :
    80    176979       311850      1.8      0.2                      if idx_global % int(self.record_each) == 0 :
    81      1770    132669504  74954.5     85.4                          output_distance,pol = self.predict(STS,SurfaceFilter=1000)
    82                                                                   #output_distance,pol = predict_jit(Surface = STS.Surface, prototype=self.prototype,
    83                                                                   #                        nb_cluster=self.nb_cluster,SurfaceFilter=1000)
    84      1770        88222     49.8      0.1                          error = np.mean(output_distance)
    85      1770       470504    265.8      0.3                          active_probe = np.histogram(pol,bins=np.arange(self.nb_cluster+1))[0]
    86      1770         4719      2.7      0.0                          record_one = pd.DataFrame([{'error':error,
    87      1770         2569      1.5      0.0                                                      'histo':active_probe}
    88                                                                                               ],
    89      1770      1967091   1111.4      1.3                                              index=[idx_global])
    90      1770      2395465   1353.4      1.5                          self.record = pd.concat([self.record, record_one])
    91                                           
    92    176979       213021      1.2      0.1                  idx_global += 1
    93         3           11      3.7      0.0              tac = time.time()
    94                                                   #self.prototype = prototype
    95         3            8      2.7      0.0          self.nb_proto = nb_proto
    96         3            5      1.7      0.0          if self.verbose > 0:
    97         3          386    128.7      0.0              print('Clustering SpatioTemporal Surface in ------ {0:.2f} s'.format(tac-tic))
    98                                           
    99         3            6      2.0      0.0          return self.prototype

Total time: 136.833 s
File: /Users/boutin.v/Documents/HOTS/HOTS/KmeansCluster.py
Function: predict at line 101

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   101                                               def predict(self, STS, event=None, SurfaceFilter=None):
   102                                                   '''
   103                                                   Methods to predict the closest prototype from a stream a STS
   104                                                   INPUT :
   105                                                       + STS : (<STS object>) Stream of SpatioTemporal Surface to fit
   106                                                       + event : (<event object>) event associated to the STS. return another event stream with new polarity
   107                                                       + SurfaceFilter : (<int>) To predict only on a small subsample of Surface of size (SurfaceFilter)
   108                                                   OUTPUT :
   109                                                       + output_distance : (<np.array>)
   110                                                       + event_output : (<event.object>)
   111                                                       + polarity : (<np.array>)
   112                                                   '''
   113      1773         1859      1.0      0.0          if SurfaceFilter == None:
   114         3            6      2.0      0.0              to_predict = STS.Surface
   115                                                   else :
   116      1770      2049950   1158.2      1.5              random_selection = np.random.permutation(np.arange(STS.Surface.shape[0]))[:SurfaceFilter]
   117      1770      4255486   2404.2      3.1              to_predict = STS.Surface[random_selection]
   118                                           
   119      1773         6290      3.5      0.0          if self.prototype is None :
   120                                                       raise ValueError('Train the Cluster before doing prediction')
   121      1773        41762     23.6      0.0          polarity,output_distance = np.zeros(to_predict.shape[0]).astype(int),np.zeros(to_predict.shape[0])
   122                                           
   123   1948752      2345789      1.2      1.7          for idx,surface in enumerate(to_predict):
   124   1946979    103452160     53.1     75.6              Euclidian_distance = np.linalg.norm(surface-self.prototype,ord=2,axis=1)
   125   1946979      9355867      4.8      6.8              polarity[idx] = np.argmin(Euclidian_distance)
   126   1946979     15318331      7.9     11.2              output_distance[idx] = np.amin(Euclidian_distance)
   127      1773         1653      0.9      0.0          if event is not None :
   128         3         2295    765.0      0.0              event_output = event.copy()
   129         3           13      4.3      0.0              event_output.polarity = polarity
   130         3           39     13.0      0.0              event_output.ListPolarities= list(np.arange(self.nb_cluster))
   131         3            3      1.0      0.0              return event_output, output_distance
   132                                                   else :
   133      1770         1285      0.7      0.0              return output_distance,polarity

Total time: 178.483 s
File: /Users/boutin.v/Documents/HOTS/HOTS/Layer.py
Function: TrainLayer at line 116

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   116                                               def TrainLayer(self, event, nb_cluster, record_each=0, NbCycle=1):
   117                                                   '''
   118                                                   Learn the Cluster
   119                                                   INPUT :
   120                                                       + event (<object event>) : input event
   121                                                       + nb_cluster(<int>) : nb of centers
   122                                                       + record_each (<int>) : record the convergence error each reach_each
   123                                                       + NbCycle (<int>) : number of time we repeat the learning process. Need to be used when not enought training data to reach the convergence
   124                                           
   125                                                   OUTPUT :
   126                                                       + output (<object event>) : Event with new polarities corresponding to the closest cluster center
   127                                                       + ClusterLayer (<object Cluster) : Learnt cluster
   128                                                   '''
   129         3            3      1.0      0.0          self.input=event
   130         3          530    176.7      0.0          self.SpTe_Layer = STS(tau=self.tau, R=self.R, verbose=self.verbose, sigma=self.sigma)
   131         3      7147126 2382375.3      4.0          Surface_Layer = self.SpTe_Layer.create(event = self.input, kernel=self.kernel)
   132         3       834896 278298.7      0.5          event_filtered, filt = self.SpTe_Layer.FilterRecent(event = self.input, threshold=self.ThrFilter)
   133         3           11      3.7      0.0          self.ClusterLayer.nb_cluster, self.ClusterLayer.record_each = nb_cluster, record_each
   134                                                   #if self.LearningAlgo == 'lagorce' :
   135                                                   #    self.ClusterLayer = KmeansLagorce(nb_cluster = nb_cluster,verbose=self.verbose, record_each=record_each)
   136                                                   #elif self.LearningAlgo == 'maro' :
   137                                                   #    self.ClusterLayer = KmeansMaro(nb_cluster = nb_cluster,verbose=self.verbose, record_each=record_each,
   138                                                   #                                eta=self.eta)
   139                                                   #elif self.LearningAlgo == 'homeo' :
   140                                                   #    self.ClusterLayer = KmeansHomeo(nb_cluster = nb_cluster,verbose=self.verbose, record_each=record_each,
   141                                                   #                                eta=self.eta, eta_homeo=self.eta_homeo)
   142         3    158318914 52772971.3     88.7          Prototype = self.ClusterLayer.fit(self.SpTe_Layer, NbCycle=NbCycle)
   143         3     12181575 4060525.0      6.8          self.output,_ = self.ClusterLayer.predict(STS=self.SpTe_Layer,event = event_filtered)
   144                                           
   145         3            3      1.0      0.0          return self.output, self.ClusterLayer

Total time: 180.092 s
File: /Users/boutin.v/Documents/HOTS/HOTS/Network.py
Function: TrainCluster at line 8

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
     8                                               def TrainCluster(self, event, NbClusterList, record_each=0, NbCycle=1, KN=None, nb_cluster=None ) :
     9         1            2      2.0      0.0          event_i = event
    10         1            1      1.0      0.0          idx_Layer = 0
    11         1            2      2.0      0.0          ClusterList = list()
    12         5            9      1.8      0.0          for idx, each_Layer in enumerate(self.Layers):
    13         4            7      1.8      0.0              if each_Layer.type == 'void':
    14                                                           print('problem !!' )
    15         4            3      0.8      0.0              elif each_Layer.type == 'Filter':
    16         1      1490550 1490550.0      0.8                  event_o = each_Layer.RunLayer(event_i)
    17         3            1      0.3      0.0              elif each_Layer.type == 'Layer':
    18                                                           #event_o, Cluster = each_Layer.TrainLayer(event_i, nb_cluster*(KN)**(idx_Layer), record_each=record_each, NbCycle=NbCycle)
    19                                                           #print('nb_cluster at layer {0} :  {1}'.format(idx_Layer+1,NbClusterList[idx_Layer]))
    20         3    178601413 59533804.3     99.2                  event_o, Cluster = each_Layer.TrainLayer(event_i, NbClusterList[idx_Layer], record_each=record_each, NbCycle=NbCycle)
    21         3           10      3.3      0.0                  ClusterList.append(Cluster)
    22         3            3      1.0      0.0                  idx_Layer = idx_Layer + 1
    23                                                           #if self.verbose>0 :
    24                                                           #    print('Training of Layer {0}'.format(idx_Layer))
    25                                                       else :
    26                                                           print(type(each_Layer))
    27         4            3      0.8      0.0              event_i = event_o
    28                                                       #print(event_i.address.shape[0])
    29         1            1      1.0      0.0          return ClusterList, event_o